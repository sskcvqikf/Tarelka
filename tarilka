#!/usr/bin/env lua

Yaml = require('yaml')
local Lfs = require("lfs")
HOME = os.getenv("HOME")
CONFIG_ROOT = HOME .. "/.config/tarilka"

function SplitMappings(full_mapping)
  local ret = {}
  for s in string.gmatch(full_mapping, "([^:]+)") do
    table.insert(ret, s)
  end
  assert(#ret == 2, "Mapping " .. full_mapping .. " is invalid")
  return ret
end

function GetOutputOfShellCommand(command)
  local handle = assert(io.popen(command))
  local ret = assert(handle:read("a"))
  assert(handle:close())
  ret = string.gsub(ret, '^%s+', '')
  ret = string.gsub(ret, '%s+$', '')
  ret = string.gsub(ret, '[\n\r]+', ' ')
  return ret
end

function RunShellCommand(command)
  local success, error_message, error_code = os.execute(command)
  if success == nil then
    print("Error runnning '" .. command .. "'. Code: " .. tostring(error_code) .. ". Message: '" .. error_message .. "'")
  end
  return success
end

function CheckIfRoot()
  return assert(GetOutputOfShellCommand("id -u")) == "0"
end

function MustNotBeRoot(f)
  return function(...)
    assert(not CheckIfRoot(), "DONT RUN THIS AS ROOT!!!")
    return f(...)
  end
end

function GetConfig(path, env)
  local handle = assert(io.open(path))
  local text = assert(handle:read("a"))
  assert(handle:close())
  local conf = Yaml.eval(text)
  local ret = assert(conf[env], "Config not found for given environment")
  return ret
end


function CommitsExist(path)
    for file in Lfs.dir(path) do
        if file:match("commit.*") then
            return true
        end
    end
    return false
end


function GetLatestFileWithTimestamp(path)
    local latestFile = nil
    local latestTimestamp = 0

    for file in Lfs.dir(path) do
        local timestamp = file:match("commit.(%d+)")
        if timestamp then
            timestamp = tonumber(timestamp)
            if timestamp > latestTimestamp then
                latestTimestamp = timestamp
                latestFile = file
            end
        end
    end

    return path .. "/" .. latestFile
end

--------------------------------------
---------------- LOGIC ---------------
--------------------------------------

function CreateImage(name, path_to_dockerfile)
  local command = "docker build -t " .. name .. " " .. path_to_dockerfile
  local _ = assert(RunShellCommand(command))
end

function LoadImageFromCommitAndReplace(_, path_to_commit)
  local command = "docker load < " .. path_to_commit
  local _ = assert(RunShellCommand(command))
end

function RunContainer(name, host_port, docker_port, mappings)
  local mount_string = ""
  for _, mapping in ipairs(mappings) do
    mount_string = mount_string .. " --mount type=bind,source=" .. mapping[1] .. ",target=" .. mapping[2]
  end

  local port_string = " -p" .. host_port .. ":" .. docker_port

  local command = "docker run -d --rm" .. mount_string ..
                  " --cap-add sys_ptrace" .. port_string ..
                  " --name " .. name .. " " .. name
  local _ = assert(RunShellCommand(command))
end

function StopContainer(name)
  local command = "docker stop " .. name
  local _ = assert(RunShellCommand(command))
end

function LoginToContainer(name, shell)
  local command = "docker exec -it " .. name .. " " .. shell
  local _ = assert(RunShellCommand(command))
end

function CommitContainer(name, path_to_dir)
  local commit_path = path_to_dir .. "/commits"

  local commit_command = "docker commit " .. name .. " " .. name
  local mkdir_command = "mkdir -p " .. commit_path
  local save_command = "docker save " .. name .. " > " .. commit_path .. "/commit." .. tostring(os.time())

  local _ = assert(RunShellCommand(commit_command))
  local _ = assert(RunShellCommand(mkdir_command))
  local _ = assert(RunShellCommand(save_command))
end

--------------------------------------
-------------- HANDLERS --------------
--------------------------------------

function HandleBuild(env, _, _)
  local path_to_dockerfile = CONFIG_ROOT .. "/docker/" .. env
  return CreateImage(env, path_to_dockerfile)
end

function HandleStart(env, _, config)
  local host_port = assert(config["host-port"], "Must be specified in config")
  local docker_port = assert(config["docker-port"], "Must be specified in config")
  local raw_mappings = config["directory-mappings"]
  local mappings = {}
  for _, raw_mapping in ipairs(raw_mappings) do
    table.insert(mappings, SplitMappings(raw_mapping))
  end

  local commits_path = CONFIG_ROOT .. "/docker/" .. env .. "/commits"
  if CommitsExist(commits_path) then
    local commit_path = GetLatestFileWithTimestamp(commits_path)
    LoadImageFromCommitAndReplace(env, commit_path)
  end

  return RunContainer(env, host_port, docker_port, mappings)
end

function HandleStop(env, _, _)
  return StopContainer(env)
end

function HandleLogin(env, _, config)
  local shell = assert(config["shell"], "Must be specified in config")
  return LoginToContainer(env, shell)
end

function HandleCommit(env, _, _)
  local path_to_dockerfile = CONFIG_ROOT .. "/docker/" .. env
  return CommitContainer(env, path_to_dockerfile)
end

COMMANDS =
{
  BUILD = HandleBuild,
  START = HandleStart,
  STOP = HandleStop,
  COMMIT = HandleCommit,
  LOGIN = HandleLogin,
}

COMMANDS_MAP =
{
  build = COMMANDS.BUILD,
  start = COMMANDS.START,
  stop = COMMANDS.STOP,
  commit = COMMANDS.COMMIT,
  login = COMMANDS.LOGIN,
}

function GetCommand(command)
  return assert(COMMANDS_MAP[command], "Command " .. command " not found")
end

function GetCommandArguments(args)
  local ret = {table.unpack(args, 3)}
  return ret
end

function GetRequiredArgs(args)
  local command = assert(args[1], "You MUST provide a command name")
  local env = assert(args[2], "You MUST provide an environment name")
  return command, env
end

function Main()
  local command, env = GetRequiredArgs(arg)

  local config_path = CONFIG_ROOT .. "/tarilka.yaml"
  local config = GetConfig(config_path, env)

  local args = GetCommandArguments(arg)
  local handler = COMMANDS_MAP[command]

  handler(env, args, config)
end

Main = MustNotBeRoot(Main)

Main()
