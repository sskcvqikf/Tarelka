#!/usr/bin/env lua

Yaml = require('yaml')

function GetOutputOfShellCommand(command)
  local handle = assert(io.popen(command))
  local ret = assert(handle:read("a"))
  assert(handle:close())
  ret = string.gsub(ret, '^%s+', '')
  ret = string.gsub(ret, '%s+$', '')
  ret = string.gsub(ret, '[\n\r]+', ' ')
  return ret
end

function RunShellCommand(command)
  return os.execute(command)
end

function CheckIfRoot()
  return assert(GetOutputOfShellCommand("id -u")) == "0"
end

function MustNotBeRoot(f)
  return function(...)
    assert(not CheckIfRoot(), "DONT RUN THIS AS ROOT!!!")
    return f(...)
  end
end

function GetConfig(path, env)
  local handle = assert(io.open(path))
  local text = assert(handle:read("a"))
  assert(handle:close())
  local conf = Yaml.eval(text)
  local ret = assert(conf[env], "Config not found for given environment")
  return ret
end

function CreateImage(name, path_to_dockerfile)
  local command = "docker build -t " .. name .. " " .. path_to_dockerfile
  local _ = assert(RunShellCommand(command))
end

function RunContainer(name, local_dir_path, host_port, docker_port)
  local command = "docker run -d --mount type=bind,source=" ..
                  local_dir_path .. ",target=/home/tarilka/workspace" ..
                  " --cap-add sys_ptrace -p" .. host_port .. ":" .. docker_port ..
                  " --name " .. name .. " " .. name
  local _ = assert(RunShellCommand(command))
end

function StopContainer(name)
  local command = "docker stop " .. name .. " && docker rm $_"
  local _ = assert(RunShellCommand(command))
end

function LoginToContainer(name, shell)
  local command = "docker exec -it " .. name .. " " .. shell
  local _ = assert(RunShellCommand(command))
end

function HandleBuild(env, _, _)
  local HOME = os.getenv("HOME")
  local path_to_dockerfile = HOME .. "/.config/tarilka/docker/" .. env
  return CreateImage(env, path_to_dockerfile)
end

function HandleStart(env, _, config)
  local host_port = assert(config["host-port"], "Must be specified in config")
  local docker_port = assert(config["docker-port"], "Must be specified in config")
  local local_dir_path = assert(config["local-dir-path"], "Must be specified in config")
  return RunContainer(env, local_dir_path, host_port, docker_port)
end

function HandleStop(env, _, _)
  return StopContainer(env)
end

function HandleLogin(env, _, config)
  local shell = assert(config["shell"], "Must be specified in config")
  return LoginToContainer(env, shell)
end

COMMANDS =
{
  BUILD = HandleBuild,
  START = HandleStart,
  STOP = HandleStop,
  LOGIN = HandleLogin,
  INSTALL = HandleInstall
}

COMMANDS_MAP =
{
  build = COMMANDS.BUILD,
  start = COMMANDS.START,
  stop = COMMANDS.STOP,
  login = COMMANDS.LOGIN,
  install = COMMANDS.INSTALL
}

function GetCommand(command)
  return assert(COMMANDS_MAP[command], "Command " .. command " not found")
end

function GetCommandArguments(args)
  local ret = {table.unpack(args, 3)}
  return ret
end

function GetRequiredArgs(args)
  local command = assert(args[1], "You MUST provide a command name")
  local env = assert(args[2], "You MUST provide an environment name")
  return command, env
end

function Main()
  local command, env = GetRequiredArgs(arg)

  local HOME = os.getenv("HOME")
  local config_path = HOME .. "/.config/tarilka/tarilka.yaml"
  local config = GetConfig(config_path, env)

  local args = GetCommandArguments(arg)
  local handler = COMMANDS_MAP[command]

  handler(env, args, config)
end

Main = MustNotBeRoot(Main)

Main()
